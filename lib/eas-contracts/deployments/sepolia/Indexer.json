{
  "address": "0xaEF4103A04090071165F78D45D83A0C0782c2B2a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEAS",
          "name": "eas",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAttestation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOffset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "Indexed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getEAS",
      "outputs": [
        {
          "internalType": "contract IEAS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        }
      ],
      "name": "getReceivedAttestationUIDCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reverseOrder",
          "type": "bool"
        }
      ],
      "name": "getReceivedAttestationUIDs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        }
      ],
      "name": "getSchemaAttestationUIDCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reverseOrder",
          "type": "bool"
        }
      ],
      "name": "getSchemaAttestationUIDs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getSchemaAttesterRecipientAttestationUIDCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reverseOrder",
          "type": "bool"
        }
      ],
      "name": "getSchemaAttesterRecipientAttestationUIDs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        }
      ],
      "name": "getSentAttestationUIDCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reverseOrder",
          "type": "bool"
        }
      ],
      "name": "getSentAttestationUIDs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "attestationUID",
          "type": "bytes32"
        }
      ],
      "name": "indexAttestation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "attestationUIDs",
          "type": "bytes32[]"
        }
      ],
      "name": "indexAttestations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "attestationUID",
          "type": "bytes32"
        }
      ],
      "name": "isAttestationIndexed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8272fd4f3d0b93ad137c8ff76bf50631aaec0290482d58f1647e9a3300f19686",
  "receipt": {
    "to": null,
    "from": "0x6457B4DB9575DBc1bac391DaE4B239722c4000d0",
    "contractAddress": "0xaEF4103A04090071165F78D45D83A0C0782c2B2a",
    "transactionIndex": 18,
    "gasUsed": "981051",
    "logsBloom": "0x
    "blockHash": "0xd89bc0a361e08e908c5d79f771228a52f9edd65d282bb27313d80ef1976e0f64",
    "transactionHash": "0x8272fd4f3d0b93ad137c8ff76bf50631aaec0290482d58f1647e9a3300f19686",
    "logs": [],
    "blockNumber": 4603907,
    "cumulativeGasUsed": "3183267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC2679fBD37d54388Ce493F1DB75320D236e1815e"
  ],
  "numDeployments": 1,
  "solcInputHash": "363c8b5710f335e9a0bfd66216b6038c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"eas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"Indexed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEAS\",\"outputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"getReceivedAttestationUIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseOrder\",\"type\":\"bool\"}],\"name\":\"getReceivedAttestationUIDs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"getSchemaAttestationUIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseOrder\",\"type\":\"bool\"}],\"name\":\"getSchemaAttestationUIDs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getSchemaAttesterRecipientAttestationUIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseOrder\",\"type\":\"bool\"}],\"name\":\"getSchemaAttesterRecipientAttestationUIDs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"getSentAttestationUIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseOrder\",\"type\":\"bool\"}],\"name\":\"getSentAttestationUIDs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"}],\"name\":\"indexAttestation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestationUIDs\",\"type\":\"bytes32[]\"}],\"name\":\"indexAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"}],\"name\":\"isAttestationIndexed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Indexed(bytes32)\":{\"params\":{\"uid\":\"The UID the attestation.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new Indexer instance.\",\"params\":{\"eas\":\"The address of the global EAS contract.\"}},\"getReceivedAttestationUIDCount(address,bytes32)\":{\"params\":{\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\"},\"returns\":{\"_0\":\"The total number of attestations.\"}},\"getReceivedAttestationUIDs(address,bytes32,uint256,uint256,bool)\":{\"params\":{\"length\":\"The number of total members to retrieve.\",\"recipient\":\"The recipient of the attestation.\",\"reverseOrder\":\"Whether the offset starts from the end and the data is returned in reverse.\",\"schema\":\"The UID of the schema.\",\"start\":\"The offset to start from.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"getSchemaAttestationUIDCount(bytes32)\":{\"params\":{\"schema\":\"The UID of the schema.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"getSchemaAttestationUIDs(bytes32,uint256,uint256,bool)\":{\"params\":{\"length\":\"The number of total members to retrieve.\",\"reverseOrder\":\"Whether the offset starts from the end and the data is returned in reverse.\",\"schema\":\"The UID of the schema.\",\"start\":\"The offset to start from.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"getSchemaAttesterRecipientAttestationUIDCount(bytes32,address,address)\":{\"params\":{\"attester\":\"The attester of the attestation.\",\"recipient\":\"The recipient of the attestation.\",\"schema\":\"The UID of the schema.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"getSchemaAttesterRecipientAttestationUIDs(bytes32,address,address,uint256,uint256,bool)\":{\"params\":{\"attester\":\"The attester of the attestation.\",\"length\":\"The number of total members to retrieve.\",\"recipient\":\"The recipient of the attestation.\",\"reverseOrder\":\"Whether the offset starts from the end and the data is returned in reverse.\",\"schema\":\"The UID of the schema.\",\"start\":\"The offset to start from.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"getSentAttestationUIDCount(address,bytes32)\":{\"params\":{\"attester\":\"The attester of the attestation.\",\"schema\":\"The UID of the schema.\"},\"returns\":{\"_0\":\"The total number of attestations.\"}},\"getSentAttestationUIDs(address,bytes32,uint256,uint256,bool)\":{\"params\":{\"attester\":\"The attester of the attestation.\",\"length\":\"The number of total members to retrieve.\",\"reverseOrder\":\"Whether the offset starts from the end and the data is returned in reverse.\",\"schema\":\"The UID of the schema.\",\"start\":\"The offset to start from.\"},\"returns\":{\"_0\":\"An array of attestation UIDs.\"}},\"indexAttestation(bytes32)\":{\"params\":{\"attestationUID\":\"The UID of the attestation to index.\"}},\"indexAttestations(bytes32[])\":{\"params\":{\"attestationUIDs\":\"The UIDs of the attestations to index.\"}},\"isAttestationIndexed(bytes32)\":{\"params\":{\"attestationUID\":\"The UID of the attestation to check.\"},\"returns\":{\"_0\":\"Whether an attestation has been already indexed.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"Indexer\",\"version\":1},\"userdoc\":{\"events\":{\"Indexed(bytes32)\":{\"notice\":\"Emitted when an attestation has been indexed.\"}},\"kind\":\"user\",\"methods\":{\"getEAS()\":{\"notice\":\"Returns the EAS.\"},\"getReceivedAttestationUIDCount(address,bytes32)\":{\"notice\":\"Returns the total number of attestations to a specific schema which were attested to/received by a     specific recipient.\"},\"getReceivedAttestationUIDs(address,bytes32,uint256,uint256,bool)\":{\"notice\":\"Returns the UIDs of attestations to a specific schema which were attested to/received by a specific     recipient.\"},\"getSchemaAttestationUIDCount(bytes32)\":{\"notice\":\"Returns the total number of attestations to a specific schema.\"},\"getSchemaAttestationUIDs(bytes32,uint256,uint256,bool)\":{\"notice\":\"Returns the UIDs of attestations to a specific schema.\"},\"getSchemaAttesterRecipientAttestationUIDCount(bytes32,address,address)\":{\"notice\":\"Returns the total number of UIDs of attestations to a specific schema which were attested by a specific     attester to a specific recipient.\"},\"getSchemaAttesterRecipientAttestationUIDs(bytes32,address,address,uint256,uint256,bool)\":{\"notice\":\"Returns the UIDs of attestations to a specific schema which were attested by a specific attester to a     specific recipient.\"},\"getSentAttestationUIDCount(address,bytes32)\":{\"notice\":\"Returns the total number of attestations to a specific schema which were attested by a specific attester.\"},\"getSentAttestationUIDs(address,bytes32,uint256,uint256,bool)\":{\"notice\":\"Returns the UIDs of attestations to a specific schema which were attested by a specific attester.\"},\"indexAttestation(bytes32)\":{\"notice\":\"Indexes an existing attestation.\"},\"indexAttestations(bytes32[])\":{\"notice\":\"Indexes multiple existing attestations.\"},\"isAttestationIndexed(bytes32)\":{\"notice\":\"Returns whether an existing attestation has been already indexed.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"Indexing Service for the Ethereum Attestation Service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Indexer.sol\":\"Indexer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5a192f0bcee5372b69b0bb746c26317a2691dd10bfa52adbd08a9b723a55036\",\"license\":\"MIT\"},\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x772b1ebcf3e5c93fecb53762e11bbdae75fcb667deea4ac21134fccfe78326e4\",\"license\":\"MIT\"},\"contracts/Indexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { IEAS, AttestationRequest, AttestationRequestData, Attestation } from \\\"./IEAS.sol\\\";\\nimport { EMPTY_UID, uncheckedInc } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\n\\n/// @title Indexer\\n/// @notice Indexing Service for the Ethereum Attestation Service\\ncontract Indexer is Semver {\\n    error InvalidEAS();\\n    error InvalidAttestation();\\n    error InvalidOffset();\\n\\n    /// @notice Emitted when an attestation has been indexed.\\n    /// @param uid The UID the attestation.\\n    event Indexed(bytes32 indexed uid);\\n\\n    /// A mapping between an account and its received attestations.\\n    mapping(address account => mapping(bytes32 => bytes32[] uids) receivedAttestations) private _receivedAttestations;\\n\\n    // A mapping between an account and its sent attestations.\\n    mapping(address account => mapping(bytes32 => bytes32[] uids) sentAttestations) private _sentAttestations;\\n\\n    // A mapping between a schema, attester, and recipient.\\n    mapping(bytes32 schemaUID => mapping(address attester => mapping(address recipient => bytes32[] uids)))\\n        private _schemaAttesterRecipientAttestations;\\n\\n    // A mapping between a schema and its attestations.\\n    mapping(bytes32 schemaUID => bytes32[] uids) private _schemaAttestations;\\n\\n    // The global mapping of attestation indexing status.\\n    mapping(bytes32 attestationUID => bool status) private _indexedAttestations;\\n\\n    // The address of the global EAS contract.\\n    IEAS private immutable _eas;\\n\\n    /// @dev Creates a new Indexer instance.\\n    /// @param eas The address of the global EAS contract.\\n    constructor(IEAS eas) Semver(1, 2, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /// @notice Returns the EAS.\\n    function getEAS() external view returns (IEAS) {\\n        return _eas;\\n    }\\n\\n    /// @notice Indexes an existing attestation.\\n    /// @param attestationUID The UID of the attestation to index.\\n    function indexAttestation(bytes32 attestationUID) external {\\n        _indexAttestation(attestationUID);\\n    }\\n\\n    /// @notice Indexes multiple existing attestations.\\n    /// @param attestationUIDs The UIDs of the attestations to index.\\n    function indexAttestations(bytes32[] calldata attestationUIDs) external {\\n        uint256 length = attestationUIDs.length;\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            _indexAttestation(attestationUIDs[i]);\\n        }\\n    }\\n\\n    /// @notice Returns whether an existing attestation has been already indexed.\\n    /// @param attestationUID The UID of the attestation to check.\\n    /// @return Whether an attestation has been already indexed.\\n    function isAttestationIndexed(bytes32 attestationUID) external view returns (bool) {\\n        return _indexedAttestations[attestationUID];\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested to/received by a specific\\n    ///     recipient.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param schema The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getReceivedAttestationUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_receivedAttestations[recipient][schema], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema which were attested to/received by a\\n    ///     specific recipient.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param schema The UID of the schema.\\n    /// @return The total number of attestations.\\n    function getReceivedAttestationUIDCount(address recipient, bytes32 schema) external view returns (uint256) {\\n        return _receivedAttestations[recipient][schema].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester.\\n    /// @param attester The attester of the attestation.\\n    /// @param schema The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSentAttestationUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_sentAttestations[attester][schema], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema which were attested by a specific\\n    /// attester.\\n    /// @param attester The attester of the attestation.\\n    /// @param schema The UID of the schema.\\n    /// @return The total number of attestations.\\n    function getSentAttestationUIDCount(address attester, bytes32 schema) external view returns (uint256) {\\n        return _sentAttestations[attester][schema].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester to a\\n    ///     specific recipient.\\n    /// @param schema The UID of the schema.\\n    /// @param attester The attester of the attestation.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttesterRecipientAttestationUIDs(\\n        bytes32 schema,\\n        address attester,\\n        address recipient,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return\\n            _sliceUIDs(_schemaAttesterRecipientAttestations[schema][attester][recipient], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of UIDs of attestations to a specific schema which were attested by a specific\\n    ///     attester to a specific recipient.\\n    /// @param schema The UID of the schema.\\n    /// @param attester The attester of the attestation.\\n    /// @param recipient The recipient of the attestation.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttesterRecipientAttestationUIDCount(\\n        bytes32 schema,\\n        address attester,\\n        address recipient\\n    ) external view returns (uint256) {\\n        return _schemaAttesterRecipientAttestations[schema][attester][recipient].length;\\n    }\\n\\n    /// @notice Returns the UIDs of attestations to a specific schema.\\n    /// @param schema The UID of the schema.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttestationUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory) {\\n        return _sliceUIDs(_schemaAttestations[schema], start, length, reverseOrder);\\n    }\\n\\n    /// @notice Returns the total number of attestations to a specific schema.\\n    /// @param schema The UID of the schema.\\n    /// @return An array of attestation UIDs.\\n    function getSchemaAttestationUIDCount(bytes32 schema) external view returns (uint256) {\\n        return _schemaAttestations[schema].length;\\n    }\\n\\n    /// @dev Indexes an existing attestation.\\n    /// @param attestationUID The UID of the attestation to index.\\n    function _indexAttestation(bytes32 attestationUID) private {\\n        // Skip already indexed attestations.\\n        if (_indexedAttestations[attestationUID]) {\\n            return;\\n        }\\n\\n        // Check if the attestation exists.\\n        Attestation memory attestation = _eas.getAttestation(attestationUID);\\n\\n        bytes32 uid = attestation.uid;\\n        if (uid == EMPTY_UID) {\\n            revert InvalidAttestation();\\n        }\\n\\n        // Index the attestation.\\n        address attester = attestation.attester;\\n        address recipient = attestation.recipient;\\n        bytes32 schema = attestation.schema;\\n\\n        _indexedAttestations[attestationUID] = true;\\n        _schemaAttestations[schema].push(attestationUID);\\n        _receivedAttestations[recipient][schema].push(attestationUID);\\n        _sentAttestations[attester][schema].push(attestationUID);\\n        _schemaAttesterRecipientAttestations[schema][attester][recipient].push(attestationUID);\\n\\n        emit Indexed({ uid: uid });\\n    }\\n\\n    /// @dev Returns a slice in an array of attestation UIDs.\\n    /// @param uids The array of attestation UIDs.\\n    /// @param start The offset to start from.\\n    /// @param length The number of total members to retrieve.\\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n    /// @return An array of attestation UIDs.\\n    function _sliceUIDs(\\n        bytes32[] memory uids,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) private pure returns (bytes32[] memory) {\\n        uint256 attestationsLength = uids.length;\\n        if (attestationsLength == 0) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (start >= attestationsLength) {\\n            revert InvalidOffset();\\n        }\\n\\n        unchecked {\\n            uint256 len = length;\\n            if (attestationsLength < start + length) {\\n                len = attestationsLength - start;\\n            }\\n\\n            bytes32[] memory res = new bytes32[](len);\\n\\n            for (uint256 i = 0; i < len; ++i) {\\n                res[i] = uids[reverseOrder ? attestationsLength - (start + i + 1) : start + i];\\n            }\\n\\n            return res;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c0f19a79712ee67248f0f0d3f343daf4281da31ffa6319c67c8a7af38a660b0\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5883c852730b00d73b10475f3b382afce8f30b89f337078ec03a66c463e048a8\",\"license\":\"MIT\"},\"contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xb74b64e20b90b35004750d2c78ceb114a304975d22d71bd9a2a9de0d483f0395\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063715ecdf61161008c578063b616352a11610066578063b616352a1461026d578063bbbdc81814610282578063ea51994b14610295578063ec864cba146102e057600080fd5b8063715ecdf61461021457806389a82fbe14610227578063af288efe1461025a57600080fd5b806354fd4d50116100bd57806354fd4d501461019b57806363bbf81b146101b057806365c40b9c146101d057600080fd5b80632412e9cc146100e4578063288a0a7b146101385780632f45f90e1461017b575b600080fd5b6101256100f2366004610b38565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260208181526040808320938352929052205490565b6040519081526020015b60405180910390f35b610125610146366004610b38565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600160209081526040808320938352929052205490565b610125610189366004610b64565b60009081526003602052604090205490565b6101a36102f3565b60405161012f9190610ba1565b6101c36101be366004610c00565b610396565b60405161012f9190610c41565b60405173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016815260200161012f565b6101c3610222366004610c85565b610410565b61024a610235366004610b64565b60009081526004602052604090205460ff1690565b604051901515815260200161012f565b6101c3610268366004610cec565b6104ad565b61028061027b366004610d42565b61053c565b005b610280610290366004610b64565b610577565b6101256102a3366004610db7565b600092835260026020908152604080852073ffffffffffffffffffffffffffffffffffffffff948516865282528085209290931684525290205490565b6101c36102ee366004610cec565b610583565b606061031e7f000000000000000000000000000000000000000000000000000000000000000061060a565b6103477f000000000000000000000000000000000000000000000000000000000000000061060a565b6103707f000000000000000000000000000000000000000000000000000000000000000061060a565b60405160200161038293929190610df9565b604051602081830303815290604052905090565b6060610405600360008781526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103f857602002820191906000526020600020905b8154815260200190600101908083116103e4575b50505050508585856106c8565b90505b949350505050565b600086815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff808a168552908352818420908816845282529182902080548351818402810184019094528084526060936104a293909291908301828280156103f857602002820191906000526020600020908154815260200190600101908083116103e45750505050508585856106c8565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208181526040808320878452825291829020805483518184028101840190945280845260609361053293909291908301828280156103f857602002820191906000526020600020908154815260200190600101908083116103e45750505050508585856106c8565b9695505050505050565b8060005b818110156105715761056984848381811061055d5761055d610e6f565b905060200201356107e7565b600101610540565b50505050565b610580816107e7565b50565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320878452825291829020805483518184028101840190945280845260609361053293909291908301828280156103f857602002820191906000526020600020908154815260200190600101908083116103e45750505050508585856106c8565b6060600061061783610a33565b600101905060008167ffffffffffffffff81111561063757610637610e9e565b6040519080825280601f01601f191660200182016040528015610661576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461066b57509392505050565b835160609060008190036106ec575050604080516000815260208101909152610408565b808510610725576040517f01da157200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8385810182101561073557508481035b60008167ffffffffffffffff81111561075057610750610e9e565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b50905060005b828110156107db5788866107955781890161079e565b81890160010185035b815181106107ae576107ae610e6f565b60200260200101518282815181106107c8576107c8610e6f565b602090810291909101015260010161077f565b50979650505050505050565b60008181526004602052604090205460ff16156108015750565b6040517fa3112a64000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a3112a6490602401600060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108d59190810190610fc6565b805190915080610911576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60e082015160c0830151602080850151600087815260048352604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558383526003855281832080548083018255908452858420018a905573ffffffffffffffffffffffffffffffffffffffff808716808552848752838520868652875283852080548085018255908652878620018c9055908816808552828752838520868652875283852080548085018255908652878620018c905585855260028752838520908552865282842090845285528183208054918201815583529382209093018890559151909185917f2178f435e9624d54115e1d50a7313c90518a363b292678118444c0a239f11cf99190a2505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a7c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610aa8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610ac657662386f26fc10000830492506010015b6305f5e1008310610ade576305f5e100830492506008015b6127108310610af257612710830492506004015b60648310610b04576064830492506002015b600a8310610b10576001015b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461058057600080fd5b60008060408385031215610b4b57600080fd5b8235610b5681610b16565b946020939093013593505050565b600060208284031215610b7657600080fd5b5035919050565b60005b83811015610b98578181015183820152602001610b80565b50506000910152565b6020815260008251806020840152610bc0816040850160208701610b7d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b801515811461058057600080fd5b60008060008060808587031215610c1657600080fd5b8435935060208501359250604085013591506060850135610c3681610bf2565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015610c7957835183529284019291840191600101610c5d565b50909695505050505050565b60008060008060008060c08789031215610c9e57600080fd5b863595506020870135610cb081610b16565b94506040870135610cc081610b16565b9350606087013592506080870135915060a0870135610cde81610bf2565b809150509295509295509295565b600080600080600060a08688031215610d0457600080fd5b8535610d0f81610b16565b94506020860135935060408601359250606086013591506080860135610d3481610bf2565b809150509295509295909350565b60008060208385031215610d5557600080fd5b823567ffffffffffffffff80821115610d6d57600080fd5b818501915085601f830112610d8157600080fd5b813581811115610d9057600080fd5b8660208260051b8501011115610da557600080fd5b60209290920196919550909350505050565b600080600060608486031215610dcc57600080fd5b833592506020840135610dde81610b16565b91506040840135610dee81610b16565b809150509250925092565b60008451610e0b818460208901610b7d565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610e47816001850160208a01610b7d565b60019201918201528351610e62816002840160208801610b7d565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610ef157610ef1610e9e565b60405290565b805167ffffffffffffffff81168114610f0f57600080fd5b919050565b8051610f0f81610b16565b8051610f0f81610bf2565b600082601f830112610f3b57600080fd5b815167ffffffffffffffff80821115610f5657610f56610e9e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610f9c57610f9c610e9e565b81604052838152866020858801011115610fb557600080fd5b610532846020830160208901610b7d565b600060208284031215610fd857600080fd5b815167ffffffffffffffff80821115610ff057600080fd5b90830190610140828603121561100557600080fd5b61100d610ecd565b825181526020830151602082015261102760408401610ef7565b604082015261103860608401610ef7565b606082015261104960808401610ef7565b608082015260a083015160a082015261106460c08401610f14565b60c082015261107560e08401610f14565b60e0820152610100611088818501610f1f565b9082015261012083810151838111156110a057600080fd5b6110ac88828701610f2a565b91830191909152509594505050505056fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "Indexed(bytes32)": {
        "params": {
          "uid": "The UID the attestation."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new Indexer instance.",
        "params": {
          "eas": "The address of the global EAS contract."
        }
      },
      "getReceivedAttestationUIDCount(address,bytes32)": {
        "params": {
          "recipient": "The recipient of the attestation.",
          "schema": "The UID of the schema."
        },
        "returns": {
          "_0": "The total number of attestations."
        }
      },
      "getReceivedAttestationUIDs(address,bytes32,uint256,uint256,bool)": {
        "params": {
          "length": "The number of total members to retrieve.",
          "recipient": "The recipient of the attestation.",
          "reverseOrder": "Whether the offset starts from the end and the data is returned in reverse.",
          "schema": "The UID of the schema.",
          "start": "The offset to start from."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "getSchemaAttestationUIDCount(bytes32)": {
        "params": {
          "schema": "The UID of the schema."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "getSchemaAttestationUIDs(bytes32,uint256,uint256,bool)": {
        "params": {
          "length": "The number of total members to retrieve.",
          "reverseOrder": "Whether the offset starts from the end and the data is returned in reverse.",
          "schema": "The UID of the schema.",
          "start": "The offset to start from."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "getSchemaAttesterRecipientAttestationUIDCount(bytes32,address,address)": {
        "params": {
          "attester": "The attester of the attestation.",
          "recipient": "The recipient of the attestation.",
          "schema": "The UID of the schema."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "getSchemaAttesterRecipientAttestationUIDs(bytes32,address,address,uint256,uint256,bool)": {
        "params": {
          "attester": "The attester of the attestation.",
          "length": "The number of total members to retrieve.",
          "recipient": "The recipient of the attestation.",
          "reverseOrder": "Whether the offset starts from the end and the data is returned in reverse.",
          "schema": "The UID of the schema.",
          "start": "The offset to start from."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "getSentAttestationUIDCount(address,bytes32)": {
        "params": {
          "attester": "The attester of the attestation.",
          "schema": "The UID of the schema."
        },
        "returns": {
          "_0": "The total number of attestations."
        }
      },
      "getSentAttestationUIDs(address,bytes32,uint256,uint256,bool)": {
        "params": {
          "attester": "The attester of the attestation.",
          "length": "The number of total members to retrieve.",
          "reverseOrder": "Whether the offset starts from the end and the data is returned in reverse.",
          "schema": "The UID of the schema.",
          "start": "The offset to start from."
        },
        "returns": {
          "_0": "An array of attestation UIDs."
        }
      },
      "indexAttestation(bytes32)": {
        "params": {
          "attestationUID": "The UID of the attestation to index."
        }
      },
      "indexAttestations(bytes32[])": {
        "params": {
          "attestationUIDs": "The UIDs of the attestations to index."
        }
      },
      "isAttestationIndexed(bytes32)": {
        "params": {
          "attestationUID": "The UID of the attestation to check."
        },
        "returns": {
          "_0": "Whether an attestation has been already indexed."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "Indexer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Indexed(bytes32)": {
        "notice": "Emitted when an attestation has been indexed."
      }
    },
    "kind": "user",
    "methods": {
      "getEAS()": {
        "notice": "Returns the EAS."
      },
      "getReceivedAttestationUIDCount(address,bytes32)": {
        "notice": "Returns the total number of attestations to a specific schema which were attested to/received by a     specific recipient."
      },
      "getReceivedAttestationUIDs(address,bytes32,uint256,uint256,bool)": {
        "notice": "Returns the UIDs of attestations to a specific schema which were attested to/received by a specific     recipient."
      },
      "getSchemaAttestationUIDCount(bytes32)": {
        "notice": "Returns the total number of attestations to a specific schema."
      },
      "getSchemaAttestationUIDs(bytes32,uint256,uint256,bool)": {
        "notice": "Returns the UIDs of attestations to a specific schema."
      },
      "getSchemaAttesterRecipientAttestationUIDCount(bytes32,address,address)": {
        "notice": "Returns the total number of UIDs of attestations to a specific schema which were attested by a specific     attester to a specific recipient."
      },
      "getSchemaAttesterRecipientAttestationUIDs(bytes32,address,address,uint256,uint256,bool)": {
        "notice": "Returns the UIDs of attestations to a specific schema which were attested by a specific attester to a     specific recipient."
      },
      "getSentAttestationUIDCount(address,bytes32)": {
        "notice": "Returns the total number of attestations to a specific schema which were attested by a specific attester."
      },
      "getSentAttestationUIDs(address,bytes32,uint256,uint256,bool)": {
        "notice": "Returns the UIDs of attestations to a specific schema which were attested by a specific attester."
      },
      "indexAttestation(bytes32)": {
        "notice": "Indexes an existing attestation."
      },
      "indexAttestations(bytes32[])": {
        "notice": "Indexes multiple existing attestations."
      },
      "isAttestationIndexed(bytes32)": {
        "notice": "Returns whether an existing attestation has been already indexed."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "Indexing Service for the Ethereum Attestation Service",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6193,
        "contract": "contracts/Indexer.sol:Indexer",
        "label": "_receivedAttestations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 6200,
        "contract": "contracts/Indexer.sol:Indexer",
        "label": "_sentAttestations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 6209,
        "contract": "contracts/Indexer.sol:Indexer",
        "label": "_schemaAttesterRecipientAttestations",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage)))"
      },
      {
        "astId": 6214,
        "contract": "contracts/Indexer.sol:Indexer",
        "label": "_schemaAttestations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 6218,
        "contract": "contracts/Indexer.sol:Indexer",
        "label": "_indexedAttestations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bytes32[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage))"
      }
    }
  }
}